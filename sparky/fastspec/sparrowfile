use Sparky::JobApi;
use HTTP::Tiny;

class Pipeline does Sparky::JobApi::Role {

  has Str $.worker = %*ENV<WORKER> || tags()<worker>;
  has Str $.notify-api = %*ENV<NOTIFY_API> || "";
  has Str $.notify-project = %*ENV<NOTIFY_PROJECT> || "";
  has Str $.notify-job = %*ENV<NOTIFY_JOB> || "";
  has Str $.spec-chunks = %*ENV<SPEC_CHUNKS> || tags()<spec_chunks> || "";

  method stage-test {

    directory "rakudo";

    git-scm "https://github.com/rakudo/rakudo.git", %(
      to => "rakudo"
    );

    bash "perl Configure.pl --gen-moar --gen-nqp --backends=moar && make install", %(
      cwd => "{$*CWD}/rakudo",
      description => "build moar"
    );

    bash "git clone https://github.com/Raku/roast.git t/spec", %(
      cwd => "{$*CWD}/rakudo",
      description => "clone roast spec"
    );

    my @lines = "rakudo/t/spec/spectest.data".IO.lines;

    my $lines-cnt = @lines.elems;

    my $chunk = ($lines-cnt / $.spec-chunks.Int ).Int;

    my @t; 

    say "test chunk size: $chunk";

    for $chunk*($.worker.Int - 1) .. $chunk*($.worker.Int )   -> $i {
        @t.push: @lines[$i];
    }

    "rakudo/t/spec/spectest.data.chunk".IO.spurt(@t.join("\n"));

    bash q:to /HERE/, %( cwd => "{$*CWD}/rakudo" , description => "spectest");
      perl -Itools/lib \
      -I3rdparty/nqp-configure/lib \
      t/harness5 --moar --fudge --keep-exit-code --tests-from-file=\
      t/spec/spectest.data.chunk
    HERE

  }


  method stage-main {

      my $j = self.new-job;

      $j.queue({
        description => "test",
        tags => %(
          stage => "test"
        ),
      });


      my $s = self.wait-job($j);

      my $nj = self.new-job: 
        :api($.notify-api), 
        :project($.notify-project), 
        :job-id($.notify-job);


      my %j = $j.info;

      my $r = HTTP::Tiny.get: "http://127.0.0.1:4000/report/raw/{%j<project>}/{%j<job-id>}";

      my $log = $r<content> ?? $r<content>.decode !! '';

      if $s<OK> {
        $nj.put-stash({ status => "OK", log => $log  });
      } else {
        $nj.put-stash({ status => "FAIL", log => $log  });
      }

      $nj.queue({
        description => "testspec 0{$.worker} report",
        tags => %(
          stage => "notify",
          worker => $.worker
        ),
      });
      
  }

  method stage-notify {

    my $nj = self.new-job: :mine(True);

    my $report = $nj.get-stash();

    say "=========================";

    say "status: ", $report<status>;

    say "log: ", $report<log>;

    bash "az container delete -g sparky --name {$.worker} -y -o table || echo", %(
      description => "delete container";
    );

  }

}

Pipeline.new.run;  
